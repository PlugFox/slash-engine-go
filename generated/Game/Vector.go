// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Game

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VectorT struct {
	X float64
	Y float64
}

func (t *VectorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	return CreateVector(builder, t.X, t.Y)
}
func (rcv *Vector) UnPackTo(t *VectorT) {
	t.X = rcv.X()
	t.Y = rcv.Y()
}

func (rcv *Vector) UnPack() *VectorT {
	if rcv == nil { return nil }
	t := &VectorT{}
	rcv.UnPackTo(t)
	return t
}

type Vector struct {
	_tab flatbuffers.Struct
}

func (rcv *Vector) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Vector) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Vector) X() float64 {
	return rcv._tab.GetFloat64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Vector) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Vector) Y() float64 {
	return rcv._tab.GetFloat64(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *Vector) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func CreateVector(builder *flatbuffers.Builder, X float64, Y float64) flatbuffers.UOffsetT {
	builder.Prep(8, 16)
	builder.PrependFloat64(Y)
	builder.PrependFloat64(X)
	return builder.Offset()
}
