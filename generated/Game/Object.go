// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Game

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ObjectT struct {
	ID int32
	Type ObjectType
	Client bool
	Size *VectorT
	Velocity *VectorT
	Position *VectorT
	Anchor *VectorT
	GravityFactor float64
	Impulses *ImpulseT
}

func (t *ObjectT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ImpulsesOffset := t.Impulses.Pack(builder)
	ObjectStart(builder)
	ObjectAddID(builder, t.ID)
	ObjectAddType(builder, t.Type)
	ObjectAddClient(builder, t.Client)
	SizeOffset := t.Size.Pack(builder)
	ObjectAddSize(builder, SizeOffset)
	VelocityOffset := t.Velocity.Pack(builder)
	ObjectAddVelocity(builder, VelocityOffset)
	PositionOffset := t.Position.Pack(builder)
	ObjectAddPosition(builder, PositionOffset)
	AnchorOffset := t.Anchor.Pack(builder)
	ObjectAddAnchor(builder, AnchorOffset)
	ObjectAddGravityFactor(builder, t.GravityFactor)
	ObjectAddImpulses(builder, ImpulsesOffset)
	return ObjectEnd(builder)
}

func (rcv *Object) UnPackTo(t *ObjectT) {
	t.ID = rcv.ID()
	t.Type = rcv.Type()
	t.Client = rcv.Client()
	t.Size = rcv.Size(nil).UnPack()
	t.Velocity = rcv.Velocity(nil).UnPack()
	t.Position = rcv.Position(nil).UnPack()
	t.Anchor = rcv.Anchor(nil).UnPack()
	t.GravityFactor = rcv.GravityFactor()
	t.Impulses = rcv.Impulses(nil).UnPack()
}

func (rcv *Object) UnPack() *ObjectT {
	if rcv == nil { return nil }
	t := &ObjectT{}
	rcv.UnPackTo(t)
	return t
}

type Object struct {
	_tab flatbuffers.Table
}

func GetRootAsObject(buf []byte, offset flatbuffers.UOffsetT) *Object {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Object{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Object) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Object) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Object) ID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Object) MutateID(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Object) Type() ObjectType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ObjectType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Object) MutateType(n ObjectType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *Object) Client() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Object) MutateClient(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *Object) Size(obj *Vector) *Vector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Object) Velocity(obj *Vector) *Vector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Object) Position(obj *Vector) *Vector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Object) Anchor(obj *Vector) *Vector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Object) GravityFactor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Object) MutateGravityFactor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

func (rcv *Object) Impulses(obj *Impulse) *Impulse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Impulse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ObjectStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func ObjectAddID(builder *flatbuffers.Builder, ID int32) {
	builder.PrependInt32Slot(0, ID, 0)
}
func ObjectAddType(builder *flatbuffers.Builder, Type ObjectType) {
	builder.PrependInt32Slot(1, int32(Type), 0)
}
func ObjectAddClient(builder *flatbuffers.Builder, Client bool) {
	builder.PrependBoolSlot(2, Client, false)
}
func ObjectAddSize(builder *flatbuffers.Builder, Size flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(Size), 0)
}
func ObjectAddVelocity(builder *flatbuffers.Builder, Velocity flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(Velocity), 0)
}
func ObjectAddPosition(builder *flatbuffers.Builder, Position flatbuffers.UOffsetT) {
	builder.PrependStructSlot(5, flatbuffers.UOffsetT(Position), 0)
}
func ObjectAddAnchor(builder *flatbuffers.Builder, Anchor flatbuffers.UOffsetT) {
	builder.PrependStructSlot(6, flatbuffers.UOffsetT(Anchor), 0)
}
func ObjectAddGravityFactor(builder *flatbuffers.Builder, GravityFactor float64) {
	builder.PrependFloat64Slot(7, GravityFactor, 0.0)
}
func ObjectAddImpulses(builder *flatbuffers.Builder, Impulses flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(Impulses), 0)
}
func ObjectEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
