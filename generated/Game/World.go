// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Game

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WorldT struct {
	Gravity float64
	Boundary *VectorT
	Objects []*ObjectT
}

func (t *WorldT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ObjectsOffset := flatbuffers.UOffsetT(0)
	if t.Objects != nil {
		ObjectsLength := len(t.Objects)
		ObjectsOffsets := make([]flatbuffers.UOffsetT, ObjectsLength)
		for j := 0; j < ObjectsLength; j++ {
			ObjectsOffsets[j] = t.Objects[j].Pack(builder)
		}
		WorldStartObjectsVector(builder, ObjectsLength)
		for j := ObjectsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(ObjectsOffsets[j])
		}
		ObjectsOffset = builder.EndVector(ObjectsLength)
	}
	WorldStart(builder)
	WorldAddGravity(builder, t.Gravity)
	BoundaryOffset := t.Boundary.Pack(builder)
	WorldAddBoundary(builder, BoundaryOffset)
	WorldAddObjects(builder, ObjectsOffset)
	return WorldEnd(builder)
}

func (rcv *World) UnPackTo(t *WorldT) {
	t.Gravity = rcv.Gravity()
	t.Boundary = rcv.Boundary(nil).UnPack()
	ObjectsLength := rcv.ObjectsLength()
	t.Objects = make([]*ObjectT, ObjectsLength)
	for j := 0; j < ObjectsLength; j++ {
		x := Object{}
		rcv.Objects(&x, j)
		t.Objects[j] = x.UnPack()
	}
}

func (rcv *World) UnPack() *WorldT {
	if rcv == nil { return nil }
	t := &WorldT{}
	rcv.UnPackTo(t)
	return t
}

type World struct {
	_tab flatbuffers.Table
}

func GetRootAsWorld(buf []byte, offset flatbuffers.UOffsetT) *World {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &World{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *World) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *World) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *World) Gravity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *World) MutateGravity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *World) Boundary(obj *Vector) *Vector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *World) Objects(obj *Object, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *World) ObjectsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func WorldStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func WorldAddGravity(builder *flatbuffers.Builder, Gravity float64) {
	builder.PrependFloat64Slot(0, Gravity, 0.0)
}
func WorldAddBoundary(builder *flatbuffers.Builder, Boundary flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(Boundary), 0)
}
func WorldAddObjects(builder *flatbuffers.Builder, Objects flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(Objects), 0)
}
func WorldStartObjectsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WorldEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
